name: CD - 持续部署

# CD流程：自动触发，完全自动化部署到生产环境
on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: '强制部署 (跳过质量检查)'
        required: false
        default: false
        type: boolean

env:
  NOTIFICATION_EMAIL: "1009383129@qq.com"

jobs:
  # 1. 检查CI状态
  check-ci-status:
    name: 检查CI状态
    runs-on: ubuntu-latest
    outputs:
      ci-passed: ${{ steps.ci-check.outputs.passed }}
      latest-commit: ${{ steps.commit-info.outputs.sha }}
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 获取提交信息
      id: commit-info
      run: |
        echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "message=$(git log -1 --pretty=%B)" >> $GITHUB_OUTPUT
        echo "author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
    
    - name: 等待CI完成
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.sha }}
        check-name: 'CI - 持续集成'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 10
        allowed-conclusions: success,failure,cancelled
    
    - name: 检查CI结果
      id: ci-check
      run: |
        # 如果强制部署，跳过CI检查
        if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
          echo "⚠️  强制部署模式，跳过CI检查"
          echo "passed=true" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # 检查CI工作流状态
        CI_STATUS=$(gh run list --workflow=ci.yml --commit=${{ github.sha }} --json conclusion --jq '.[0].conclusion' 2>/dev/null || echo "null")
        
        if [ "$CI_STATUS" = "success" ]; then
          echo "✅ CI检查通过"
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ CI检查失败或未完成: $CI_STATUS"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 2. 自动部署到生产环境
  auto-deploy-production:
    name: 自动部署到生产环境
    runs-on: ubuntu-latest
    needs: check-ci-status
    if: needs.check-ci-status.outputs.ci-passed == 'true'
    environment: 
      name: production
      url: http://shenyiqing.xin
    outputs:
      deployment-id: ${{ steps.deploy-info.outputs.id }}
      deployment-time: ${{ steps.deploy-info.outputs.time }}
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 部署信息记录
      id: deploy-info
      run: |
        DEPLOY_ID="deploy-$(date +%Y%m%d-%H%M%S)-${{ github.run_number }}"
        DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        
        echo "id=$DEPLOY_ID" >> $GITHUB_OUTPUT
        echo "time=$DEPLOY_TIME" >> $GITHUB_OUTPUT
        
        echo "🚀 开始自动部署到生产环境"
        echo "📋 部署信息:"
        echo "  - 部署ID: $DEPLOY_ID"
        echo "  - 提交SHA: ${{ github.sha }}"
        echo "  - 提交作者: ${{ needs.check-ci-status.outputs.author }}"
        echo "  - 部署时间: $DEPLOY_TIME"
    
    - name: 预部署安全检查
      run: |
        echo "🔒 执行预部署安全检查..."
        
        # 检查是否包含敏感信息
        if grep -r "password\|secret\|key" .env.production 2>/dev/null; then
          echo "⚠️  检测到可能的敏感信息，请确认"
        fi
        
        # 检查主要配置文件
        if [ ! -f "docker-compose.yml" ]; then
          echo "❌ 缺少Docker Compose配置文件"
          exit 1
        fi
        
        if [ ! -f "nginx.production.conf" ]; then
          echo "❌ 缺少Nginx生产配置文件"
          exit 1
        fi
        
        echo "✅ 安全检查通过"
    
    - name: 创建部署备份
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "📦 创建自动部署前备份..."
          
          cd ~/QAToolBox || exit 1
          
          # 创建带时间戳的备份目录
          BACKUP_DIR="./backups/auto-deploy-$(date +%Y%m%d-%H%M%S)"
          mkdir -p $BACKUP_DIR
          
          # 备份数据库
          if docker-compose ps db | grep -q "Up"; then
            docker-compose exec -T db pg_dump -U qatoolbox qatoolbox_production > $BACKUP_DIR/database.sql
            echo "✅ 数据库备份完成"
          fi
          
          # 备份媒体文件
          if [ -d "media" ]; then
            tar -czf $BACKUP_DIR/media.tar.gz media/
            echo "✅ 媒体文件备份完成"
          fi
          
          # 记录当前版本信息
          git rev-parse HEAD > $BACKUP_DIR/previous_commit.txt
          echo "${{ github.sha }}" > $BACKUP_DIR/new_commit.txt
          
          # 清理旧备份（保留最近5个）
          ls -t ./backups/auto-deploy-* | tail -n +6 | xargs rm -rf 2>/dev/null || true
          
          echo "✅ 备份完成: $BACKUP_DIR"
    
    - name: 执行零停机部署
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "🚀 执行零停机自动部署..."
          
          cd ~/QAToolBox || exit 1
          
          # 拉取最新代码
          git fetch origin
          echo "当前版本: $(git rev-parse HEAD)"
          git checkout main
          git reset --hard origin/main
          echo "新版本: $(git rev-parse HEAD)"
          
          # 更新配置文件
          if [ -f ".env.production" ] && [ ! -f ".env" ]; then
            cp .env.production .env
            echo "✅ 环境配置已更新"
          fi
          
          # 滚动更新部署
          echo "🔄 开始滚动更新..."
          
          # 构建新镜像
          docker-compose build --no-cache web
          
          # 逐个重启服务以实现零停机
          docker-compose up -d --no-deps web
          
          # 等待新容器启动
          sleep 30
          
          # 健康检查
          for i in {1..10}; do
            if curl -f http://localhost:8000/health/ > /dev/null 2>&1; then
              echo "✅ 新容器健康检查通过"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ 新容器健康检查失败"
              exit 1
            fi
            echo "等待新容器启动... ($i/10)"
            sleep 10
          done
          
          # 更新其他服务
          docker-compose up -d
          
          # 运行数据库迁移
          docker-compose exec -T web python manage.py migrate --noinput
          
          # 收集静态文件
          docker-compose exec -T web python manage.py collectstatic --noinput
          
          echo "✅ 零停机部署完成"
    
    - name: 部署后立即验证
      run: |
        echo "🔍 部署后立即验证..."
        sleep 30
        
        # 健康检查
        for endpoint in "http://47.103.143.152/health/" "http://shenyiqing.xin/health/"; do
          if curl -f "$endpoint" > /dev/null 2>&1; then
            echo "✅ $endpoint 健康检查通过"
          else
            echo "❌ $endpoint 健康检查失败"
            exit 1
          fi
        done
        
        echo "✅ 基础验证通过"

  # 3. 全面部署后测试
  comprehensive-tests:
    name: 全面部署后测试
    runs-on: ubuntu-latest
    needs: auto-deploy-production
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: 安装测试依赖
      run: |
        python -m pip install --upgrade pip
        pip install requests selenium pytest
    
    - name: 运行全面验证测试
      run: |
        echo "🧪 运行全面部署后验证..."
        python scripts/post_deployment_verification.py --url http://shenyiqing.xin
    
    - name: 性能回归测试
      run: |
        echo "📊 性能回归测试..."
        
        # 测试关键页面响应时间
        urls=("http://shenyiqing.xin" "http://shenyiqing.xin/health/" "http://47.103.143.152")
        
        for url in "${urls[@]}"; do
          echo "测试: $url"
          response_time=$(curl -w "%{time_total}" -o /dev/null -s "$url")
          echo "响应时间: ${response_time}s"
          
          # 响应时间不应超过3秒
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "⚠️  响应时间过长: ${response_time}s"
          else
            echo "✅ 响应时间正常"
          fi
        done
    
    - name: 功能冒烟测试
      run: |
        echo "🔥 功能冒烟测试..."
        
        # 测试主要功能端点
        BASE_URL="http://shenyiqing.xin"
        
        # 测试静态资源
        if curl -f "$BASE_URL/static/css/" > /dev/null 2>&1; then
          echo "✅ 静态资源可访问"
        else
          echo "⚠️  静态资源可能有问题"
        fi
        
        # 测试API端点
        if curl -f "$BASE_URL/users/api/session-status/" > /dev/null 2>&1; then
          echo "✅ API端点可访问"
        else
          echo "⚠️  API端点可能有问题"
        fi
        
        echo "✅ 冒烟测试完成"

  # 4. 部署成功后的监控设置
  post-deployment-monitoring:
    name: 部署后监控设置
    runs-on: ubuntu-latest
    needs: [auto-deploy-production, comprehensive-tests]
    if: needs.auto-deploy-production.result == 'success' && needs.comprehensive-tests.result == 'success'
    steps:
    - name: 设置部署监控
      run: |
        echo "📊 设置部署后监控..."
        
        # 这里可以集成监控系统
        # 例如：Prometheus、Grafana、New Relic等
        
        echo "✅ 监控设置完成"
    
    - name: 更新部署状态
      run: |
        echo "📝 更新部署状态..."
        
        # 记录成功部署信息
        DEPLOY_INFO=$(cat << EOF
        {
          "deployment_id": "${{ needs.auto-deploy-production.outputs.deployment-id }}",
          "commit_sha": "${{ github.sha }}",
          "deployment_time": "${{ needs.auto-deploy-production.outputs.deployment-time }}",
          "status": "success",
          "environment": "production"
        }
        EOF
        )
        
        echo "部署信息: $DEPLOY_INFO"

  # 5. 自动回滚机制
  auto-rollback:
    name: 自动回滚
    runs-on: ubuntu-latest
    needs: [auto-deploy-production, comprehensive-tests]
    if: failure() && (needs.auto-deploy-production.result == 'failure' || needs.comprehensive-tests.result == 'failure')
    steps:
    - name: 执行自动回滚
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          echo "🔄 检测到部署失败，执行自动回滚..."
          
          cd ~/QAToolBox || exit 1
          
          # 查找最新的备份
          LATEST_BACKUP=$(ls -t ./backups/auto-deploy-* | head -1)
          
          if [ -z "$LATEST_BACKUP" ]; then
            echo "❌ 未找到备份文件，无法自动回滚"
            exit 1
          fi
          
          echo "使用备份: $LATEST_BACKUP"
          
          # 读取之前的提交
          if [ -f "$LATEST_BACKUP/previous_commit.txt" ]; then
            PREVIOUS_COMMIT=$(cat "$LATEST_BACKUP/previous_commit.txt")
            echo "回滚到提交: $PREVIOUS_COMMIT"
            
            # 回滚代码
            git checkout $PREVIOUS_COMMIT
            
            # 重新部署
            docker-compose down
            docker-compose up -d --build
            
            # 等待服务启动
            sleep 30
            
            # 验证回滚
            if curl -f http://localhost:8000/health/ > /dev/null 2>&1; then
              echo "✅ 自动回滚成功"
            else
              echo "❌ 自动回滚失败"
              exit 1
            fi
          else
            echo "❌ 备份信息不完整，无法自动回滚"
            exit 1
          fi

  # 6. CD结果通知
  cd-notification:
    name: CD结果通知
    runs-on: ubuntu-latest
    needs: [check-ci-status, auto-deploy-production, comprehensive-tests, post-deployment-monitoring, auto-rollback]
    if: always()
    steps:
    - name: 准备通知数据
      id: prepare
      run: |
        CI_STATUS="${{ needs.check-ci-status.result }}"
        DEPLOY_STATUS="${{ needs.auto-deploy-production.result }}"
        TESTS_STATUS="${{ needs.comprehensive-tests.result }}"
        MONITOR_STATUS="${{ needs.post-deployment-monitoring.result }}"
        ROLLBACK_STATUS="${{ needs.auto-rollback.result }}"
        
        # 确定整体CD状态
        if [[ "$DEPLOY_STATUS" == "success" && "$TESTS_STATUS" == "success" ]]; then
          OVERALL_STATUS="SUCCESS"
          STATUS_ICON="✅"
          STATUS_MESSAGE="持续部署成功完成"
        elif [[ "$ROLLBACK_STATUS" == "success" ]]; then
          OVERALL_STATUS="ROLLBACK"
          STATUS_ICON="🔄"
          STATUS_MESSAGE="部署失败但回滚成功"
        else
          OVERALL_STATUS="FAILURE"
          STATUS_ICON="❌"
          STATUS_MESSAGE="持续部署失败"
        fi
        
        echo "ci_status=$CI_STATUS" >> $GITHUB_OUTPUT
        echo "deploy_status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT
        echo "tests_status=$TESTS_STATUS" >> $GITHUB_OUTPUT
        echo "overall_status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "status_icon=$STATUS_ICON" >> $GITHUB_OUTPUT
        echo "status_message=$STATUS_MESSAGE" >> $GITHUB_OUTPUT
    
    - name: 发送CD结果邮件
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "${{ steps.prepare.outputs.status_icon }} CD报告 - 持续部署 (${{ steps.prepare.outputs.overall_status }})"
        to: ${{ env.NOTIFICATION_EMAIL }}
        from: QAToolBox CD <${{ secrets.EMAIL_USERNAME }}>
        html_body: |
          <html>
          <head>
            <style>
              body { font-family: 'Segoe UI', Arial, sans-serif; line-height: 1.6; }
              .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; }
              .success { color: #28a745; font-weight: bold; }
              .failure { color: #dc3545; font-weight: bold; }
              .rollback { color: #ffc107; font-weight: bold; }
              .auto-deploy { background: #e8f5e8; padding: 15px; border-radius: 5px; margin: 15px 0; border-left: 4px solid #28a745; }
              .stage { margin: 15px 0; padding: 15px; border-left: 4px solid #ddd; background: #f8f9fa; }
              .stage-success { border-left-color: #28a745; }
              .stage-failure { border-left-color: #dc3545; }
              .stage-skipped { border-left-color: #6c757d; }
              .access-info { background: #f1f8e9; padding: 15px; border-radius: 5px; margin: 15px 0; }
              .footer { margin-top: 30px; padding: 15px; background: #f1f3f5; border-radius: 5px; font-size: 12px; color: #666; }
            </style>
          </head>
          <body>
            <div class="header">
              <h2>⚡ CD - 持续部署报告</h2>
              <p><strong>部署类型:</strong> 自动部署</p>
              <p><strong>仓库:</strong> ${{ github.repository }}</p>
              <p><strong>分支:</strong> ${{ github.ref_name }}</p>
              <p><strong>提交:</strong> ${{ github.sha }}</p>
              <p><strong>触发者:</strong> ${{ github.actor }}</p>
            </div>
            
            <div class="auto-deploy">
              <h3>🤖 自动化部署流程</h3>
              <p><strong>部署ID:</strong> ${{ needs.auto-deploy-production.outputs.deployment-id || '未知' }}</p>
              <p><strong>部署时间:</strong> ${{ needs.auto-deploy-production.outputs.deployment-time || '未知' }}</p>
              <p><strong>强制部署:</strong> ${{ github.event.inputs.force_deploy || 'false' }}</p>
            </div>
            
            <div>
              <h3>🔄 部署流程状态</h3>
              
              <div class="stage stage-${{ needs.check-ci-status.result }}">
                <strong>CI状态检查:</strong> ${{ steps.prepare.outputs.ci_status }}
                <br><small>验证持续集成是否通过</small>
              </div>
              
              <div class="stage stage-${{ needs.auto-deploy-production.result }}">
                <strong>自动部署:</strong> ${{ steps.prepare.outputs.deploy_status }}
                <br><small>零停机部署到生产环境</small>
              </div>
              
              <div class="stage stage-${{ needs.comprehensive-tests.result }}">
                <strong>部署后测试:</strong> ${{ steps.prepare.outputs.tests_status }}
                <br><small>功能验证、性能测试、冒烟测试</small>
              </div>
              
              {% if needs.auto-rollback.result %}
              <div class="stage stage-${{ needs.auto-rollback.result }}">
                <strong>自动回滚:</strong> ${{ needs.auto-rollback.result }}
                <br><small>检测到问题自动回滚到上一版本</small>
              </div>
              {% endif %}
            </div>
            
            <div class="access-info">
              <h3>🌐 生产环境访问</h3>
              <p><strong>主域名:</strong> <a href="http://shenyiqing.xin">http://shenyiqing.xin</a></p>
              <p><strong>IP访问:</strong> <a href="http://47.103.143.152">http://47.103.143.152</a></p>
              <p><strong>管理后台:</strong> <a href="http://shenyiqing.xin/admin/">http://shenyiqing.xin/admin/</a></p>
              <p><strong>健康检查:</strong> <a href="http://shenyiqing.xin/health/">http://shenyiqing.xin/health/</a></p>
            </div>
            
            <div style="margin: 20px 0; padding: 15px; background: #${{ steps.prepare.outputs.overall_status == 'SUCCESS' && 'f8fff9' || (steps.prepare.outputs.overall_status == 'ROLLBACK' && 'fffef0' || 'fff8f8') }}; border-radius: 5px;">
              <h3>📊 部署结果</h3>
              <p class="${{ steps.prepare.outputs.overall_status == 'SUCCESS' && 'success' || (steps.prepare.outputs.overall_status == 'ROLLBACK' && 'rollback' || 'failure') }}">
                ${{ steps.prepare.outputs.status_message }}
              </p>
            </div>
            
            <div class="footer">
              <p><strong>CD类型:</strong> 持续部署 (完全自动化)</p>
              <p><strong>下次部署:</strong> 推送到main分支时自动触发</p>
              <p><strong>监控:</strong> 部署后自动启动监控</p>
              <p><strong>回滚:</strong> 发现问题时自动回滚</p>
              <p><strong>查看详情:</strong> <a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">GitHub Actions</a></p>
            </div>
          </body>
          </html>
