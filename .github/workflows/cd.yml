name: CD Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed

env:
  PYTHON_VERSION: '3.11'
  DJANGO_VERSION: '4.2'

jobs:
  # 构建Docker镜像
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          qatoolbox:latest
          qatoolbox:${{ github.sha }}
          qatoolbox:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # 部署到测试环境
  deploy-staging:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加部署到测试环境的脚本
        # 例如：使用SSH连接到服务器并运行部署命令

  # 部署到生产环境
  deploy-production:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加部署到生产环境的脚本
        # 例如：使用SSH连接到服务器并运行部署命令
