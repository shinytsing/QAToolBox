name: Deploy to Aliyun

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to Aliyun
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        key: ${{ secrets.ALIYUN_SSH_KEY }}
        port: ${{ secrets.ALIYUN_PORT || 22 }}
        script: |
          # 更新系统
          sudo apt-get update
          
          # 安装Docker (如果未安装)
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            rm get-docker.sh
          fi
          
          # 安装Docker Compose (如果未安装)
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
          fi
          
          # 创建项目目录
          PROJECT_DIR="/opt/qatoolbox"
          sudo mkdir -p $PROJECT_DIR
          sudo chown $USER:$USER $PROJECT_DIR
          cd $PROJECT_DIR
          
          # 克隆或更新项目
          if [[ -d "QAToolbox" ]]; then
            cd QAToolbox
            git pull origin main
          else
            git clone https://github.com/shinytsing/QAToolbox.git
            cd QAToolbox
          fi
          
          # 配置环境变量
          if [[ ! -f ".env" ]]; then
            cp env.production .env
            # 生成随机密钥
            SECRET_KEY=$(openssl rand -base64 32)
            sed -i "s/your-super-secret-key-change-this-in-production/$SECRET_KEY/" .env
            DB_PASSWORD=$(openssl rand -base64 16)
            sed -i "s/qatoolbox123/$DB_PASSWORD/" .env
            REDIS_PASSWORD=$(openssl rand -base64 16)
            sed -i "s/redis123/$REDIS_PASSWORD/" .env
          fi
          
          # 停止现有服务
          docker-compose down 2>/dev/null || true
          
          # 拉取最新镜像
          docker-compose pull
          
          # 启动服务
          docker-compose up -d --build
          
          # 等待服务启动
          sleep 30
          
          # 运行数据库迁移
          docker-compose exec -T web python manage.py migrate
          
          # 收集静态文件
          docker-compose exec -T web python manage.py collectstatic --noinput
          
          # 检查服务状态
          docker-compose ps
          
          echo "部署完成！"
          echo "访问地址: http://47.103.143.152:8000"
          echo "域名地址: http://shenyiqing.xin:8000"

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
