version: '3.8'

services:
  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: qatoolbox_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-qatoolbox}
      POSTGRES_USER: ${DB_USER:-qatoolbox}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-qatoolbox123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-qatoolbox} -d ${DB_NAME:-qatoolbox}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qatoolbox_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qatoolbox_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - qatoolbox_network

  # Web应用
  web:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: qatoolbox_web
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qatoolbox_network

  # Celery任务队列
  celery:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: qatoolbox_celery
    restart: unless-stopped
    command: celery -A config worker -l info --concurrency=2
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - media_volume:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qatoolbox_network

  # Celery定时任务
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.optimized
    container_name: qatoolbox_celery_beat
    restart: unless-stopped
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DB_HOST=db
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - qatoolbox_network

  # Nginx反向代理（可选）
  nginx:
    image: nginx:alpine
    container_name: qatoolbox_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - qatoolbox_network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  qatoolbox_network:
    driver: bridge
