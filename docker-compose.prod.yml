version: '3.8'

services:
  # Web应用服务
  web:
    build:
      context: .
      dockerfile: Dockerfile
    image: qatoolbox:latest
    container_name: qatoolbox_web
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
      - celery
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery工作进程
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    image: qatoolbox:latest
    container_name: qatoolbox_celery
    restart: unless-stopped
    command: celery -A QAToolBox worker -l info --concurrency=4
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "celery", "-A", "QAToolBox", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat调度器
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    image: qatoolbox:latest
    container_name: qatoolbox_celery_beat
    restart: unless-stopped
    command: celery -A QAToolBox beat -l info
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_DEBUG=False
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
    volumes:
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
    networks:
      - qatoolbox_network

  # PostgreSQL数据库
  db:
    image: postgres:15-alpine
    container_name: qatoolbox_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: qatoolbox_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: qatoolbox_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    depends_on:
      - web
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 监控服务 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: qatoolbox_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - qatoolbox_network

  # 监控服务 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: qatoolbox_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - qatoolbox_network

  # 日志聚合 - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: qatoolbox_elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - qatoolbox_network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: qatoolbox_logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - logs_volume:/app/logs
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - qatoolbox_network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: qatoolbox_kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - qatoolbox_network

  # 微服务 - 用户服务
  user-service:
    build:
      context: ./microservices/user-service
      dockerfile: Dockerfile
    image: qatoolbox_user_service:latest
    container_name: qatoolbox_user_service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - SERVICE_PORT=8001
      - DATABASE_URL=${USER_SERVICE_DB_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - db
      - redis
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 微服务 - 工具服务
  tool-service:
    build:
      context: ./microservices/tool-service
      dockerfile: Dockerfile
    image: qatoolbox_tool_service:latest
    container_name: qatoolbox_tool_service
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - SERVICE_PORT=8002
      - DATABASE_URL=${TOOL_SERVICE_DB_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - db
      - redis
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 微服务 - 社交服务
  social-service:
    build:
      context: ./microservices/social-service
      dockerfile: Dockerfile
    image: qatoolbox_social_service:latest
    container_name: qatoolbox_social_service
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - SERVICE_PORT=8003
      - DATABASE_URL=${SOCIAL_SERVICE_DB_URL}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - db
      - redis
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 微服务 - AI服务
  ai-service:
    build:
      context: ./microservices/ai-service
      dockerfile: Dockerfile
    image: qatoolbox_ai_service:latest
    container_name: qatoolbox_ai_service
    restart: unless-stopped
    ports:
      - "8004:8004"
    environment:
      - SERVICE_PORT=8004
      - DATABASE_URL=${AI_SERVICE_DB_URL}
      - REDIS_URL=${REDIS_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - db
      - redis
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API网关
  api-gateway:
    build:
      context: ./microservices/api-gateway
      dockerfile: Dockerfile
    image: qatoolbox_api_gateway:latest
    container_name: qatoolbox_api_gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - GATEWAY_PORT=8080
      - USER_SERVICE_URL=http://user-service:8001
      - TOOL_SERVICE_URL=http://tool-service:8002
      - SOCIAL_SERVICE_URL=http://social-service:8003
      - AI_SERVICE_URL=http://ai-service:8004
    depends_on:
      - user-service
      - tool-service
      - social-service
      - ai-service
    networks:
      - qatoolbox_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 服务发现 - Consul
  consul:
    image: consul:latest
    container_name: qatoolbox_consul
    restart: unless-stopped
    ports:
      - "8500:8500"
    command: consul agent -server -bootstrap-expect=1 -ui -client=0.0.0.0
    networks:
      - qatoolbox_network

  # 负载均衡器 - HAProxy
  haproxy:
    image: haproxy:latest
    container_name: qatoolbox_haproxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    depends_on:
      - web
      - user-service
      - tool-service
      - social-service
      - ai-service
    networks:
      - qatoolbox_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  qatoolbox_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
